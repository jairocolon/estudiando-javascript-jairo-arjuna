/* ***EJERCICIO #1 PARA ARJUNA ***
En este desafÃ­o tienes un array que contiene otros arrays internos, debes retornar un array que tenga los elementos de los otros arrays eliminando los arrays internos y dejando solo los valores, normalmente a esto le llamamos aplanar el array o "Flattening Algorithm". */

// Tu cÃ³digo aquÃ­ ðŸ‘‡â€‹

const raiz = [
	[1, 2, 3],
	[4, 5, 6, [12, 10], [30, 20]],
	[7, 8, 9],
];

//SOLUCIÃ“N ARJUNA
function aplanarArray(datos, acumulador) {
	for (let i = 0; i < datos.length; ++i) {
		if (Array.isArray(datos[i])) {
			aplanarArray(datos[i], acumulador);
		} else {
			acumulador.push(datos[i]);
		}
	}
}

let resultado = [];
aplanarArray(raiz, resultado);
console.log(resultado);

//SOLUCIÃ“N 1 JAIRO
const resultArrays = raiz.flat(3);
console.log(resultArrays);

//SOLUCIÃ“N 2 JAIRO
function solution(array) {
	return array.flat(3);
}

solution([1, 2, 3], [4, 5, 6], [7, 8, 9]);

/* ***EJERCICIO #2 PARA ARJUNA *** 
En este desafÃ­o tienes array de strings y cada lÃ­nea es un fragmento, el Zen de Python, tu reto es hacer un mÃ©todo que retorne el nÃºmero de palabras totales que tiene el array.

La soluciÃ³n deberÃ­a tener un input y output como los siguientes:
*/
function solution(lines) {
	// Tu cÃ³digo aquÃ­ ðŸ‘ˆâ€‹â€‹
}

//input
solution([
	'Mejorando cada dÃ­a',
	'Aprendiendo cosas cada vez mÃ¡s nuevas',
	'No es simple, pero enfocado lo lograrÃ©',
	'Y cuando llegue arriba, dirÃ© LO LOGRÃ‰',
]);

//output
//El resultado de la longitud debe ser 23
